// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, email
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Email        string
	PasswordHash string
	IpAddress    *netip.Addr
}

type CreateUserRow struct {
	ID    pgtype.UUID
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.IpAddress,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID    pgtype.UUID
	Email string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, ip_address
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        pgtype.UUID
	Email     string
	IpAddress *netip.Addr
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Email, &i.IpAddress)
	return i, err
}
